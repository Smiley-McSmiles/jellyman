#!/bin/bash
jellymanVersion="v1.6.5"

###############################################################################
# FUNCTIONS                                                                   #
###############################################################################

Backup()
{
	Has_sudo
	# Backup /opt/jellyfin to passed directory
	backupDirectory=$1
	tarPath=
	fileName=jellyfin-backup.tar
	mkdir /opt/jellyfin/backup
	cp /bin/jellyman /opt/jellyfin/backup/
	cp /etc/jellyfin.conf /opt/jellyfin/backup/
	cp /usr/lib/systemd/system/jellyfin.service /opt/jellyfin/backup/
	if [[ $(echo "${backupDirectory: -1}") == "/" ]]; then
		tarPath=$backupDirectory$fileName
		echo $tarPath
	else
		tarPath=$backupDirectory/$fileName
		echo $tarPath
	fi

	time tar cvf $tarPath /opt/jellyfin
	USER=$(stat -c '%U' $backupDirectory)
	chown -f $USER:$USER $tarPath
	chmod -f 660 $tarPath
	echo
	echo "|--------------------------------------------------------|"
	echo "|        To Import on your next setup, simply run:       |"
	echo "|  git clone https://github.com/Smiley-McSmiles/jellyman |"
	echo "|                       cd jellyman                      |"
	echo "|                   chmod ug+x setup.sh                  |"
	echo "|     sudo ./setup.sh -i [Path to jellyfin-backup.tar]   |"
	echo "|--------------------------------------------------------|"
	echo
	echo "Your backup is:"
	tarSize=$(du -h $tarPath)
	echo "Size: $tarSize"
}

Change_variable()
{
	varToChange=$1
	newVarContent=$2
	varType=$3
	if [[ $varType == "array" ]]; then
		newVarContent='"'"$newVarContent"'"'
	fi
	
	if [[ ! -n $varToChange ]] || [[ ! -n $newVarContent ]]; then
		echo "Function Change_variable requires 2 parameters: varToChange newVarContent"
		exit
	else
		sed -i -e "s|$varToChange=.*|$varToChange=$newVarContent|g" /opt/jellyfin/config/jellyman.conf
	fi
	
	if [[ $varType == "array" ]]; then
		newArrayVar=$(grep "$varToChange" /opt/jellyfin/config/jellyman.conf | sed -r 's/="/=(/g' | sed -r 's/"/)/g')
		sed -i -e "s|$varToChange=.*|$newArrayVar|g" /opt/jellyfin/config/jellyman.conf
	fi
}

isCurrentVersion()
{
	source /opt/jellyfin/config/jellyman.conf
	jellyfinVersionToDownload=$1
	if [[ $jellyfinVersionToDownload == $currentVersion ]]; then
		echo "The installed version of Jellyfin matches the newest version available."
		echo "Current Jellyfin version installed: $currentVersion"
		return 0
	else
		echo "Newer Jellyfin version found..."
		return 1
	fi
}

isInstalledVersion()
{
	jellyfinVersionToDownload=$1
	
	if [ -d /opt/jellyfin/$jellyfinVersionToDownload ]; then
		echo "The version to download matches an already installed version."
		echo "Please use 'jellyman -vs' to switch Jellyfin versions."
		return 0
	else
		return 1
	fi
}

Check_disk_free()
{
	source /opt/jellyfin/config/jellyman.conf
	if [ ! -n $defaultPath ]; then 
		echo "|-----------------------------------------------|"
		echo "|          No default directory found...        |"
		echo "|     Please enter the root directory for       |"
		echo "|              your Media Library               |"
		echo "|    DO NOT ENTER YOUR USER DIRECTORY AS IT     |"
		echo "|    WILL RESET PERMISSIONS OF THE ENTERED      |"
		echo "|       DIRECTORY TO YOUR JELLYFIN USER         |"
		echo "|-----------------------------------------------|"
		read defaultPath
		defaultPath=($defaultPath)
		Change_variable defaultPath $defaultPath
		df -h ${defaultPath[*]}
	else 
		df -h ${defaultPath[*]}
	fi
}

Get_jellyman_version()
{
	echo "Jellyman $jellymanVersion"
}

Get_jellyfin_version()
{
	Has_sudo
	source /opt/jellyfin/config/jellyman.conf
	echo $currentVersion
}

Download_version()
{
	Has_sudo
	source /opt/jellyfin/config/jellyman.conf
	versionListVar=$(curl -sL https://repo.jellyfin.org/releases/server/linux/versions/stable/combined/)
	versionList=$(echo "$versionListVar" | grep -o ">[0-9][0-9].[0-9].[0-9]" | sed -r "s|>||g")
	versionListNumbered=$(echo "$versionList" | cat -n)
	maxNumber=$(echo "$versionList" | wc -l)
	newVersionNumber=""
	versionToSwitchNumber=0
	warning=""

	while (( $versionToSwitchNumber > $maxNumber )) || (( $versionToSwitchNumber < 1 )); do
		clear
		echo "Current Jellyfin version installed"
		echo "$currentVersion"
		echo
		echo "Please select a stable version:"
		echo $warning
		echo "$versionListNumbered"
		echo "Please enter the number corresponding with"
		read -p "the version you want to install [1-$maxNumber] : " versionToSwitchNumber
		newVersionNumber=$(echo "$versionList" | head -n $versionToSwitchNumber | tail -n 1)

		if [[ ! $versionToSwitchNumber == [1-$maxNumber] ]]; then
			versionToSwitchnumber=0
			warning="ERROR: Please select one of the numbers provided!"
			echo "Press CTRL+C to exit..."
		elif isCurrentVersion "jellyfin_$newVersionNumber" || isInstalledVersion "jellyfin_$newVersionNumber"; then
			versionToSwitchnumber=0
			warning="ERROR: That Jellyfin version is already installed!"
			echo "Press CTRL+C to exit..."
		else
			newVersionUnderscore=$(echo "$newVersionNumber"_)
			echo "https://repo.jellyfin.org/releases/server/linux/versions/stable/combined/$newVersionNumber/jellyfin_$newVersionUnderscore$architecture.tar.gz"
			jellyman -u "https://repo.jellyfin.org/releases/server/linux/versions/stable/combined/$newVersionNumber/jellyfin_$newVersionUnderscore$architecture.tar.gz"
		fi
	done
}

Version_switch()
{
	Has_sudo
	versionToSwitchNumber=0
	installedVersions=$(ls /opt/jellyfin/ | grep "_")
	maxNumber=$(echo "$installedVersions" | wc -l)
	warning=

	while [[ ! $versionToSwitchNumber == [1-$maxNumber] ]]; do
		clear
		echo "Current Jellyfin version installed"
		echo "$currentVersion"
		echo
		echo "Jellyfin versions already downloaded:"
		echo "$installedVersions" | cat -n
		echo $warning
		echo "Please enter the number corresponding with"
		read -p "the version you want to install : " versionToSwitchNumber
		newVersion=$(echo "$installedVersions" | head -n $versionToSwitchNumber | tail -n 1)

		if [[ ! $versionToSwitchNumber == [1-$maxNumber] ]]; then
			warning="ERROR: Please select one of the numbers provided!"
			echo "Press CTRL+C to exit..."
		else
			jellyman -S
			unlink /opt/jellyfin/jellyfin
			ln -s /opt/jellyfin/$newVersion /opt/jellyfin/jellyfin
			chown -Rfv $defaultUser:$defaultUser /opt/jellyfin/jellyfin
			Change_variable currentVersion $newVersion
			jellyman -s
		fi
	done
}

Remove_version()
{
	Has_sudo
	versionToRemoveNumber=0
	versionToRemove=""
	installedVersions=$(ls /opt/jellyfin/ | grep "_")
	maxNumber=$(echo "$installedVersions" | wc -l)
	warning=

	while [[ ! $versionToRemoveNumber == [1-$maxNumber] ]]; do
		clear
		echo $maxNumber
		echo "Current Jellyfin version installed"
		echo "$currentVersion"
		echo
		echo "Jellyfin versions already downloaded:"
		echo "$installedVersions" | cat -n
		echo
		echo "$warning"
		echo "Please enter the number corresponding with"
		read -p "the version you want to ERASE : " versionToRemoveNumber
		versionToRemove=$(echo "$installedVersions" | head -n $versionToRemoveNumber | tail -n 1)
		warning="ERROR: Please select one of the numbers provided!"
		if isCurrentVersion $versionToRemove; then
			warning="ERROR: $versionToRemove is the currently running version.
Please use 'jellyman -vs' and choose a different version,
before removing $versionToRemove"
			versionToRemoveNumber=0
		fi
	done

		echo "Removing /opt/jellyfin/$versionToRemove"
		Countdown 5
		rm -rfv /opt/jellyfin/$versionToRemove
}

Help()
{
	# Display Help
	echo "Jellyman - The Jellyfin Manager $jellymanVersion"
	echo "-Created by Smiley McSmiles"
	echo 
	echo "Syntax: jellyman -[COMMAND] [PARAMETER]"
	echo "COMMANDS:"
	echo "-b     [DIRECTORY] Input directory to output backup archive."
	echo "-d     Disable Jellyfin on System Start."
	echo "-e     Enable Jellyfin on System Start."
	echo "-h     Print this Help."
	echo "-i     [FILE.tar] Input file to Import jellyfin-backup.tar."
	echo "-p     [DIRECTORY - optional] Reset the permissions of Jellyfin's Media Library or supplied directory."
	echo "-r     Restart Jellyfin."
	echo "-s     Start Jellyfin."
	echo "-S     Stop Jellyfin."
	echo "-t     Status of Jellyfin."
	echo "-u     [URL - optional] Downloads and updates the current stable or supplied Jellyfin version."
	echo "-U     Update Jellyman - The Jellyfin Manager."
	echo "-ub    Update Jellyfin to the most recent Beta."
	echo "-v     Get the current installed version of Jellyfin."
	echo "-vd    Download an available Jellyfin version from the stable repository."
	echo "-vs    Switch Jellyfin version for another previously installed version."
	echo "-rv    Remove a Jellyfin version."
	echo "-rc    Removes old https certifications and creates new ones for the next 365 days."
	echo "-rn    Batch renaming script for TV shows."
	echo "-ls    Tell Jellyfin to scan your media library."
	echo "-cp    Change Jellyfins http network port - Default = 8096"
	echo "-cps   Change Jellyfins https network port - Default = 8920."
	echo "-ik    Import an API key"
	echo "-md    Change the Media Directory for Jellyman."
	echo "-tc    Transcode a file/directory with a GB per hour filter (1.5GB is recommended)"
	echo "-X     Uninstall Jellyfin and Jellyman Completely."
	echo
	echo "To browse Jellyfin versions please use this link."
	echo "***WARNING*** ONLY USE COMBINED(Web & Server) PACKAGES"
	echo "https://repo.jellyfin.org/releases/server/linux/versions/"
}

Import()
{
	Has_sudo
	#Import jellyfin-backup.tar
	importTar=$1
	echo "******WARNING******"
	echo "******CAUTION******"
	echo "This procedure should only be used as a fresh install of Jellyfin."
	echo "As this procedure will erase /opt/jellyfin COMPLETELY."
	sleep 5
	read -p "...Continue? [yes/No] :" importOrNotToImport
	if [[ $importOrNotToImport == [yY][eE][sS] ]]; then
		echo "IMPORTING $importTar"
		jellyman -S
		rm -rf /opt/jellyfin
		tar xvf $importTar -C /
		clear
		source /opt/jellyfin/config/jellyman.conf
		mv -f /opt/jellyfin/backup/jellyfin /bin/
		chmod +x /bin/jellyman
		mv -f /opt/jellyfin/backup/jellyfin.service /usr/lib/systemd/system/
		mv -f /opt/jellyfin/backup/jellyfin.conf /etc/
		if id "$defaultUser" &>/dev/null; then 
			chown -Rfv $defaultUser:$defaultUser /opt/jellyfin
			chmod -Rfv 770 /opt/jellyfin
			jellyman -s -t
		else
			clear
			echo "|------------------------------------------------------------------|"
			echo "|                       *******ERROR*******                        |"
			echo "|   The imported default Jellyfin user($defaultUser) has not yet   |"
			echo "|   been created. This error is likely due to a read error of the  |"
			echo "|            /opt/jellyfin/config/jellyman.conf file.              |"
			echo "|  The default user is usually created by jellyman - The CLI Tool, |"
			echo "|                   when running setup.sh.                         |"
			echo "|    You may want to see who owns that configuration file with:    |"
			echo "|            'ls /opt/jellyfin/config/jellyman.conf'               |"
			echo "|------------------------------------------------------------------|"
			echo
			read -p "...Continue with $defaultUser? [yes/No] :" newUserOrOld
			if [[ $newUserOrOld == [yY][eE][sS] ]]; then
				echo "Great!"
				sleep .5
				chown -Rfv $defaultUser:$defaultUser /opt/jellyfin
				chmod -Rfv 770 /opt/jellyfin
				jellyman -s -t
			else
				read -p "No? Which user should own /opt/jellyfin?: " defaultUser
				echo "Well... I should've known $defaultUser would be the one..."
				sleep 1
				chown -Rfv $defaultUser:$defaultUser /opt/jellyfin
				chmod -Rfv 770 /opt/jellyfin
				jellyman -s -t
			fi
		fi

	else
		echo "Returning..."
	fi	 
}

Library_scan()
{
	Has_sudo
	source /opt/jellyfin/config/jellyman.conf
	Check_api_key
	curl -d POST http://localhost:$networkPort/Library/Refresh?api_key=$apiKey
}

Import_api_key()
{
	Has_sudo
	echo "Create a API key by signing into Jellyfin, going to Dashboard, then"
	echo "clicking on API Keys under the Advanced section on the left."
	echo
	read -p "Please paste your API Key : " newAPIKey
	if [[ -n $newAPIKey ]]; then
		echo "Logging new api key."
		Change_variable apiKey $newAPIKey
	else
		echo "Warning no input detected, please re-enter the command and paste an API key"
		exit
	fi
}

Check_api_key()
{
	Has_sudo
	source /opt/jellyfin/config/jellyman.conf
	if [[ ! -n $apiKey ]]; then
		echo "***ERROR***"
		echo "NO API KEY FOUND, RUN 'sudo jellyman -ik' TO IMPORT A NEW KEY!"
		return 1
		exit
	else
		return 0
	fi
}

Http_port_change()
{
	Has_sudo
	source /opt/jellyfin/config/jellyman.conf
	echo
	echo "Default http port is 8096"
	if Is_jellyfin_setup; then
		read -p "Please enter the new http network port for Jellyfin: " port
		Change_variable httpPort $port
		sed -i -e "s|<HttpServerPortNumber>*</HttpServerPortNumber>|<HttpServerPortNumber>$port</HttpServerPortNumber>|g" /opt/jellyfin/config/network.xml
		sed -i -e "s|<PublicPort>*</PublicPort>|<PublicPort>$port</PublicPort>|g" /opt/jellyfin/config/network.xml
		echo "Unblocking port $port..."
		if [ -x "$(command -v ufw)" ]; then
			ufw allow $port
			ufw reload
		elif [ -x "$(command -v firewall-cmd)" ]; then 
			firewall-cmd --permanent --zone=public --add-port=$port/tcp
			firewall-cmd --reload
		else
			echo "FAILED TO OPEN PORT $port! ERROR NO 'ufw' OR 'firewall-cmd' COMMAND FOUND!";
		fi
	else
		exit
	fi
}

Https_port_change()
{
	Has_sudo
	source /opt/jellyfin/config/jellyman.conf
	if Is_jellyfin_setup; then
		echo "Default https port is 8920"
		read -p "Please enter the new https network port for Jellyfin: " port
		Change_variable httpsPort $port
		sed -i -e "s|<HttpsServerPortNumber>*</HttpsServerPortNumber>|<HttpsServerPortNumber>$port</HttpsServerPortNumber>|g" /opt/jellyfin/config/network.xml
		sed -i -e "s|<PublicHttpsPort>*</PublicHttpsPort>|<PublicHttpsPort>$port</PublicHttpsPort>|g" /opt/jellyfin/config/network.xml
		echo "Unblocking port $port..."
		if [ -x "$(command -v ufw)" ]; then
			ufw allow $port
			ufw reload
		elif [ -x "$(command -v firewall-cmd)" ]; then 
			firewall-cmd --permanent --zone=public --add-port=$port/tcp
			firewall-cmd --reload
		else
			echo "FAILED TO OPEN PORT $port! ERROR NO 'ufw' OR 'firewall-cmd' COMMAND FOUND!";
		fi
	else
		exit
	fi
}


Permissions()
{
	Has_sudo
	source /opt/jellyfin/config/jellyman.conf
	checkForDefaultPath="yes"
	directoryToFix=

	if [ -d "$1" ]; then
		directoryToFix=$1
		echo "Setting permissions for "$directoryToFix""
		time $(chown -Rf $defaultUser:$defaultUser "$directoryToFix"
		chmod -Rf 770 "$directoryToFix")
		echo "...DONE"
	elif [ ! -d "$1" ] && [ -n "$1" ]; then
		echo "$1 is not a directory. Please enter a absolute path to your media"
		echo "EXITING..."
		exit
	else

		#Check if there is a recorded media library path for chown and chmod:
		if ! areDirectories "${defaultPath[*]}"; then
			echo "No default media directory found..."
			echo "Running sudo jellyman -md to change media directory in:"
			Countdown 5
			jellyman -md
		fi

		echo "Setting permissions for ${defaultPath[*]}"
		time $(chown -Rf $defaultUser:$defaultUser ${defaultPath[*]}
		chmod -Rf 770 ${defaultPath[*]})
		echo "...DONE"
	fi
}

Status()
{
	Check_disk_free
	echo
	echo
	systemctl status jellyfin.service
}

Update()
{
	Has_sudo
	source /opt/jellyfin/config/jellyman.conf
	customVersionLink=
	customVersion=""
	fileType=""
	jellyfin_archive=""
	jellyfin=""
	new_jellyfin_version=""
	
	if [[ $1 == *"://"* ]] ; then 
		echo "Fetching custom Jellyfin version..."
		customVersionLink=$1
		customVersion=$(echo $customVersionLink | rev | cut -d/ -f1 | rev)
		jellyfin_archive=$customVersion
		jellyfin=$(echo $jellyfin_archive | sed -r "s|_$architecture.tar.gz||g")
		fileType=$(echo $customVersion | cut -d_ -f3)
		
		if isInstalledVersion $jellyfin; then
			exit
		fi
		
		if [[ $fileType != "$architecture.tar.gz" ]]; then
			echo "Supplied URL does not point to a $architecture.tar.gz.. EXITING..."
			exit
		fi
	
		mkdir /opt/jellyfin/update
		wget -P /opt/jellyfin/update/ $customVersionLink
	
	else
		echo "Getting current version from repository..."
		mkdir /opt/jellyfin/update
		stableReleases=$(curl -sL https://repo.jellyfin.org/releases/server/linux/stable/combined/)
		jellyfin_archive=$(echo $stableReleases | grep -o "jellyfin_"[0-9][0-9].[0-9].[0-9]"_$architecture.tar.gz" | head -1)
		jellyfin=$(echo $jellyfin_archive | sed -r "s|_$architecture.tar.gz||g")
		
		echo "jellyfin_archive = $jellyfin_archive"
		echo "jellyfin = $jellyfin"
		echo "currentVersion = $currentVersion"
		if ! isCurrentVersion $jellyfin && ! isInstalledVersion $jellyfin; then
			wget -O /opt/jellyfin/update/$jellyfin_archive https://repo.jellyfin.org/releases/server/linux/stable/combined/$jellyfin_archive
		else
			exit
		fi
	fi
	
	new_jellyfin_version=$(echo $jellyfin | sed -r 's/jellyfin_//g')
	echo "Unpacking $jellyfin_archive to /opt/jellyfin/..."
	tar xvzf /opt/jellyfin/update/$jellyfin_archive -C /opt/jellyfin/
	jellyman -S
	unlink /opt/jellyfin/jellyfin
	ln -s /opt/jellyfin/$jellyfin /opt/jellyfin/jellyfin
	echo "Removing $jellyfin_archive"
	rm -rfv /opt/jellyfin/update

	chown -R $defaultUser:$defaultUser /opt/jellyfin
	echo "Jellyfin updated to version $new_jellyfin_version"
	Change_variable currentVersion $jellyfin
	jellyman -s -t
}


# needs testing when new beta is available
Update_beta()
{
	Has_sudo
	source /opt/jellyfin/config/jellyman.conf
	betasAvailable=$(curl -sL https://repo.jellyfin.org/releases/server/linux/stable-pre/)
	jellyfinArchives=$(echo "$betasAvailable" | grep "combined" | grep -o jellyfin_.*_$architecture.tar.gz'"' | cut -d '"' -f 1)
	jellyfinNumbered=$(echo "$jellyfinArchives" | sed -r "s|_$architecture.tar.gz||g" | cat -n)
	versionSelected=0
	maxNumber=$(echo "$jellyfinNumbered" | wc -l)
	newVersionName=
	newVersionNumber=
	newVersionArchive=
	warning=""
	
	if [[ ! $betasAvailable == .*"tar.gz".* ]]; then
		echo "Sorry, no pre-releases are available right now..."
		exit
	fi

	while (( $versionSelected > $maxNumber )) || (( $versionSelected < 1 )); do
		clear
		echo "Available pre-releases:"
		echo $warning
		echo "$jellyfinNumbered"
		read -p "Select which version to install [1-$maxNumber] : " versionSelected
		newVersionName=$(echo "$jellyfinArchives" | head -n $versionSelected | tail -n 1 | sed -r "s|_$architecture.tar.gz||g")
		newVersionNumber=$(echo $newVersionName | sed -r 's/jellyfin_//g')
		if [[ ! $versionSelected == [1-$maxNumber] ]]; then
			versionSelected=0
			warning="ERROR: Please select one of the numbers provided!"
			echo "Press CTRL+C to exit..."
		elif isCurrentVersion $newVersionName || isInstalledVersion $newVersionName; then
			warning="ERROR: That Jellyfin version is already installed!"
			echo "Press CTRL+C to exit..."
		else
			newVersionArchive=$(echo "$jellyfinArchives" | head -n $versionSelected | tail -n 1)
			echo "Getting $newVersionArchive..."
			wget -O /opt/jellyfin/update/$newVersionName https://repo.jellyfin.org/releases/server/linux/stable-pre/$newVersionNumber/combined/$newVersionArchive
			echo "Unpacking $newVersionArchive to /opt/jellyfin/..."
			tar xvzf /opt/jellyfin/update/$newVersionArchive -C /opt/jellyfin/
			jellyman -S
			unlink /opt/jellyfin/jellyfin
			ln -s /opt/jellyfin/$newVersionName /opt/jellyfin/jellyfin
			echo "Removing $newVersionArchive"
			rm -rfv /opt/jellyfin/update

			chown -R $defaultUser:$defaultUser /opt/jellyfin
			echo "Jellyfin updated to version $newVersionNumber"
			Change_variable currentVersion $newVersionName
			jellyman -s -t
		fi
	done
}


Is_jellyfin_setup()
{
	if [ -f "/opt/jellyfin/config/network.xml" ]; then
		return 0
	else
		echo "|--------------------------------------------------------------|"
		echo "|                        ***WARNING***                         |"
		echo "|             JELLYFIN DID NOT GET SET UP PROPERLY!            |"
		echo "|        NO /opt/jellyfin/config/network.xml FILE FOUND        |"
		echo "|  This is likely due to not completing the first time setup.  |"
		echo "|     Navigate to http://localhost:8096/ to complete setup     |"
		echo "|--------------------------------------------------------------|"
		return 1
	fi

}

Recertify_https()
{
	Has_sudo
	echo "|------------------------------------------------------|"
	echo "|  Creating OpenSSL self signed certificate for https. |"
	echo "|             Valid for the next 365 days.             |"
	echo "|       This only works if you have completed          |" 
	echo "|           first time setup in Jellyfin               |"
	echo "|------------------------------------------------------|"
	source /opt/jellyfin/config/jellyman.conf
	if Is_jellyfin_setup; then
		rm -fv /opt/jellyfin/cert/*
		openssl req -x509 -newkey rsa:4096 -keyout /opt/jellyfin/cert/privkey.pem -out /opt/jellyfin/cert/cert.pem -days 365 -nodes -subj '/CN=jellyfin.lan'
		openssl pkcs12 -export -out /opt/jellyfin/cert/jellyfin.pfx -inkey /opt/jellyfin/cert/privkey.pem -in /opt/jellyfin/cert/cert.pem -passout pass:
		echo "Enabling https..."
		sed -i -e "s|<EnableHttps>*</EnableHttps>|<EnableHttps>true</EnableHttps>|g" /opt/jellyfin/config/network.xml
		sed -i -e "s|<CertificatePath>*</CertificatePath>|<CertificatePath>/opt/jellyfin/cert/jellyfin.pfx</CertificatePath>|g" /opt/jellyfin/config/network.xml
		chown -Rf $defaultUser:$defaultUser /opt/jellyfin/cert
		chmod -Rf 770 /opt/jellyfin/cert
		jellyman -r
	else
		exit
	fi
}

Rename_tv()
{
	Has_sudo
	source /opt/jellyfin/config/jellyman.conf
	nameOfTestFile=""

	while [ ! -f $nameOfTestFile ]; do
		clear
		echo "|--------------------------------------------------------------|"
		echo "|                        ***WARNING***                         |"
		echo "|       TV SHOW FILE NAMES MUST CONTAIN 'SXXEXX' X=number      |"
		echo "|                                                              |"
		echo "|            Please enter the directory to correct             |"
		echo "|                        For example:                          |"
		echo "|  /jfin/TV/*/*/* <- For every Episode(May Crash Be Careful!)  |"
		echo "|                            OR:                               |"
		echo "|  /jfin/TV/Breaking*Bad/*/* <- For Every Episode in a show    |"
		echo "|                            OR:                               |"
		echo "|  /jfin/TV/Breaking*Bad/Season*2/* <- For Every Episode in    |"
		echo "|                    a season of a show                        |"
		echo "|                                                              |"
		echo "|      BE ADVISED, IF YOU'RE RE-NAMING MULTIPLE SHOWS,         |"
		echo "|             MAKE SURE ALL THE SHOW DIRECTORY                 |"
		echo "|      NAMES ARE IN THE SAME LOCATION IN THE DIRECTORY         |"
		echo "|--------------------------------------------------------------|"
		echo
		read -p "Please enter a directory : " directoryToCorrect
		clear
		nameOfTestFile=$(ls -1 $directoryToCorrect | head -1)
	done
	
	testDirCount=$(echo $nameOfTestFile | grep -o "/" | wc -w)

	if [[ $directoryToCorrect != *"/" ]]; then
		testDirCount=$(($testDirCount + 1))
	fi

	iteration=2
	number=1

	while [ $number -lt $testDirCount ]; do
		testName=$(echo $nameOfTestFile | cut -d "/" -f $iteration)
		echo "$number : $testName"
		iteration=$(($iteration + 1))
		
		number=$(($number + 1))	
	done
	
	echo "Please enter the number that corresponds with the show's name above"
	read directoryNumber
	directoryNumber=$(($directoryNumber + 1))
	nameOfShow=$(dirname "$directoryToCorrect" | cut -d "/" -f $directoryNumber)
	echo "You chose $nameOfShow"

	for item in $directoryToCorrect
	do
		echo $item
			if [[ "$item" == *[sS][0-9][0-9][eE][0-9][0-9]* ]]; then
				extensionOfFile="${item##*.}"
				nameOfDirectory=$(dirname "$item")
				nameOfShow=$(dirname "$item" | cut -d "/" -f $directoryNumber)
				episodeNumber=$(echo "$item" | grep -oE '[sS][0-9][0-9][eE][0-9][0-9]')
				mv "$item" "$nameOfDirectory/$nameOfShow $episodeNumber.$extensionOfFile"
				newItemName="$nameOfDirectory/$nameOfShow $episodeNumber.$extensionOfFile"
				echo "item:"
				echo "$item"
				#echo "Directory:"
				#echo "$nameOfDirectory"
				#echo "Name Of Show:"
				#echo $nameOfShow
				#echo "Episode:"
				#echo "$episodeNumber"
				#echo "extension of file:"
				#echo "$extensionOfFile"
				echo "New Name:"
				echo "$newItemName"
				chown -fv $defaultUser:$defaultUser "$newItemName"
				chmod -fv 770 "$newItemName"
				echo
			fi
	done
}

Uninstall()
{
	Has_sudo
	echo "|-------------------------------------------------------------------|"
	echo "|                        ******WARNING******                        |"
	echo "|                        ******CAUTION******                        |"
	echo "|                     Are you completely sure?                      |"
	echo "|          This will delete all files relating to Jellyfin          |"
	echo "|   and Jellyman, exceptthe Media Library and jellyfin-backup.tar   |"
	echo "|-------------------------------------------------------------------|"
	echo
	read -p "CONTINUE?: [yes/No]" toUninstallOrNotToUninstall
	if [[ $toUninstallOrNotToUninstall == [yY][eE][sS] ]]; then
		echo "Goodbye..."
		echo "Removing Jellyfin and Jellyman in:"
		Countdown 5
		source /opt/jellyfin/config/jellyman.conf
			echo "Blocking port 8096 and 8920..."
		if [ -x "$(command -v ufw)" ]; then
			ufw deny 8096/tcp
			ufw deny 8920/tcp
			ufw reload
		elif [ -x "$(command -v firewall-cmd)" ]; then
			firewall-cmd --permanent --zone=public --remove-port=8096/tcp
			firewall-cmd --permanent --zone=public --remove-port=8920/tcp
			firewall-cmd --reload
		else
			echo "|-------------------------------------------------------------------|"
			echo "|                        ******WARNING******                        |"
			echo "|                        ******CAUTION******                        |"
			echo "|                  FAILED TO CLOSE PORT 8096/8920!                  |"
			echo "|          ERROR NO 'ufw' OR 'firewall-cmd' COMMAND FOUND!          |"
			echo "|-------------------------------------------------------------------|"
		fi
		rm -fv /etc/jellyfin.conf /bin/jellyman $jellyfinServiceLocation
		rm -rfv /opt/jellyfin
		userdel -f $defaultUser
	else
		echo "Phew! That was a close one!"
	fi
}


isVideo()
{
	_video=$1
	if [[ $_video == *"."[mMaA][kKvVpP][iIvV4] ]]; then
		return 0
	else
		return 1
	fi
}

Transcode_file()
{
	videoToEdit="$1"
	desiredGBperHour=$2
	delteOrnot=$3
	preset=$4
	crf=$5
	
	videoSize=$(du -h "$videoToEdit" | cut -d "/" -f 1)
	videoDuration=$(ffprobe -i "$videoToEdit" -show_entries format=duration -v quiet -of csv="p=0" | cut -d "." -f 1)
	if isVideo "$videoToEdit"; then
		_videoSizeGB=null
		_videoTimeHours=$(bc -l <<< "$videoDuration/3600")
		if [[ $videoSize == *"M"* ]]; then
			_videoSizeMB=$(echo $videoSize | sed -r "s|M||g" | cut -d "	" -f 1)
			_videoSizeGB=$(bc -l <<< "$_videoSizeMB/1024")
		else
			_videoSizeGB=$(echo $videoSize | sed -r "s|G||g")
		fi
		_videoRatio=$(bc -l <<< "$_videoSizeGB/$_videoTimeHours")
		if [ 1 -eq "$(echo "$_videoRatio > $desiredGBperHour" | bc)" ]; then
			#TRANSCODE FILE
			echo "Transcoding $videoToEdit ..."
			_newName=$(echo $videoToEdit | rev | cut -d "." -f 2 | rev)
			echo "Video time in Hours: $_videoTimeHours"
			echo "Video size GB:  $_videoSizeGB"
			echo "Current GB/Hour: $_videoRatio"
			time ffmpeg -i "$videoToEdit" -c:v libx265 -c:a copy -movflags +faststart -preset $preset -crf $crf "$_newName.downsampled.mp4"
			_newVideoSize=$(du -h "$_newName.downsampled.mp4" | cut -d "/" -f 1)
			echo "Downsampled size: $_newVideoSize"
			if $deleteOrNot; then
			  echo "DELETING $videoToEdit IN 10 SECONDS!"
			  Countdown 10
			  rm -v "$videoToEdit"
			  mv -v "$_newName.downsampled.mp4" "$_newName.mp4"
		  fi

		else
			echo "$videoToEdit is less than $desiredGBperHour GB/Hour, skipping..."
		fi
	else
		_file=$(echo $videoToEdit | rev | cut -d "/" -f 1 | rev)
		echo "$_file is not a video, skipping..."
	fi
}

Transcode()
{
	echo "|--------------------------------------------------------------|"
	echo "|                        ***WARNING***                         |"
	echo "|          Please enter the directory to transcode             |"
	echo "|                        For example:                          |"
	echo "|  /jfin/TV/*/*/* <- For every Episode(May Crash Be Careful!)  |"
	echo "|                            OR:                               |"
	echo "|  /jfin/TV/Breaking*Bad/*/* <- For Every Episode in a show    |"
	echo "|                            OR:                               |"
	echo "|  /jfin/TV/Breaking*Bad/Season*2/* <- For Every Episode in    |"
	echo "|                    a season of a show                        |"
	echo "|                                                              |"
	echo "|       BE ADVISED, IF YOU'RE TRANSCODING MULTIPLE FILES,      |"
	echo "|       THIS IS GOING TO TAKE A WHILE, IT IS RECOMMENDED       |"
	echo "|        TO RUN THIS COMMAND IN 'screen' THEN PRESSING         |"
	echo "|                       CTRL + A THEN D                        |"
	echo "|--------------------------------------------------------------|"
	read -p 'Please enter the path to the file(s) : ' _directoryToCorrect
	echo
	echo "Please enter the desired GB per hour of video"
	read -p "EXAMPLE: 1 OR 2.5 : " desiredGBperHour
	
	preset=0
	while [ $preset -gt 9 ] || [ $preset -lt 1 ]; do
	  clear
	  echo
	  echo '* = recommended'
	  echo
	  echo "1: ultrafast"
	  echo "2: superfast"
	  echo "3: veryfast"
	  echo "4: faster"
	  echo "5: fast"
	  echo '6: medium *'
	  echo "7: slow"
	  echo "8: slower"
	  echo "9: veryslow"
	  echo
	  read -p "Please choose a transcode preset [1-9] : " preset
	  if [[ ! $preset == [1-9] ]]; then
		 preset=0
	  fi
	done
	echo
	case "$preset" in
		1)	preset="ultrafast" ;;
		2)	preset="superfast" ;;
		3)	preset="veryfast" ;;
		4)	preset="faster" ;;
		5)	preset="fast" ;;
		6)	preset="medium" ;;
		7)	preset="slow" ;;
		8)	preset="slower" ;;
		9)	preset="veryslow" ;;
	esac
	
	crf=0
	while [ $crf -gt 30 ] || [ $crf -lt 20 ]; do
		clear
		echo 'Please enter a Constant Rate Factor (CRF) [20-30]'
		echo "22-26 is recommended"
		read -p '20 is better quality and 30 is lower quality : ' crf
		if [[ ! $crf == [0-9][0-9] ]]; then
			crf=0
		fi
	done
	echo
	read -p 'Would you like to delete the original file(s) after transcode? [N/y] : ' deleteOrNot
	echo
	
	if [[ $deleteOrNot == [yY]* ]]; then
		deleteOrNot=true
	else
		deleteOrNot=false
	fi
	
	for item in $_directoryToCorrect
	do
		Transcode_file "$item" $desiredGBperHour $deleteOrNot $preset $crf
	done
}

Countdown()
{
	_time=$1
	while [ $_time -gt 0 ]; do
		echo $_time
		_time=$(($_time - 1))
		sleep 1
	done
}

Update-jellyman()
{
	Has_sudo
	jellymanManFile=$(curl -sL https://raw.githubusercontent.com/Smiley-McSmiles/jellyman/main/jellyman.1)
	currentJellymanVersion=$(echo $jellymanManFile | grep " - v" | cut -d "v" -f2 | cut -d " " -f1)
	if [[ "v$currentJellymanVersion" == $jellymanVersion ]]; then
		echo "Jellyman is up to date. No new versions available."
		exit
	else
		echo "Updating Jellyman - The Jellyfin Manager from $jellymanVersion to v$currentJellymanVersion"
		git clone https://github.com/Smiley-McSmiles/jellyman
		cd jellyman
		chmod ug+x setup.sh
		sudo ./setup.sh -U
	fi
}

Change_Media_Directory()
{
	Has_sudo
	mediaPath=""
	warning=""
	continue=true

	while $continue; do
		clear
		echo "|---------------------------------------------------------|"
		echo "| Please enter all media directories separated by a space |"
		echo "|                       example:                          |"
		echo "|          /media/hdd1/Movies /media/hdd2/TV              |"
		echo "|---------------------------------------------------------|"
		echo
		echo $warning
		read -p "DIRECTORIES: " mediaPath
		if areDirectories "$mediaPath"; then
			continue=false
		else
			warning="ERROR: Make sure each input is a directory!"
		fi
	done

	Change_variable defaultPath "$mediaPath" array
}

areDirectories()
{
	directoriesToCheck="$1"
	isDirectory=true
	for item in $directoriesToCheck
	do
		if [ ! -d $item ]; then
			isDirectory=false
			# echo "$item is not a directory"
		fi
	done
	if $isDirectory; then
		# echo "$directoriesToCheck are directories"
		return 0
	else
		# echo "$directoriesToCheck are not directories"
		return 1
	fi
}


Has_sudo()
{
	has_sudo_access=""
	`timeout -k .1 .1 bash -c "sudo /bin/chmod --help" >&/dev/null 2>&1` >/dev/null 2>&1
	if [ $? -eq 0 ];then
		has_sudo_access="YES"
		source /opt/jellyfin/config/jellyman.conf
	else
		has_sudo_access="NO"
		echo "$USER, you're not using sudo..."
		echo "Please use 'sudo jellyman -[COMMAND] [PARAMETERS]'"
		exit
	fi
}

###############################################################################
# FUNCTIONS END                                                               #
###############################################################################


###############################################################################
# MAIN                                                                        #
###############################################################################
if [ -n "$1" ]; then
	total=1
	while [ -n "$1" ]; do
		case "$1" in
			-b) Backup $2
				 shift ;;
			-d) systemctl disable jellyfin.service ;;
			-e) systemctl enable jellyfin.service ;;
			-h) Help ;;
			-i) Import $2
				 shift ;;
			-p) if [[ "$2" == "-"* ]]; then
					 Permissions 
				 else
					 Permissions $2
					 shift 
				 fi  ;;
			-r) systemctl restart jellyfin.service ;;
			-s) systemctl start jellyfin.service ;;
			-S) systemctl stop jellyfin.service ;;
			-t) Status ;;
			-u) if [[ "$2" == "-"* ]]; then
					 Update
				 else
					 Update $2
					 shift
				 fi ;;
			-U) Update-jellyman 
				 exit ;;
			-ub) Update_beta ;;
			-v) Get_jellyfin_version
					Get_jellyman_version ;;
			-vd) Download_version ;;
			-vs) Version_switch ;;
			-rv) Remove_version ;;
			-rc) Recertify_https ;;
			-rn) Rename_tv ;;
			-ls) Library_scan ;;
			-cp) Http_port_change ;;
			-cps) Https_port_change ;;
			-ik) Import_api_key ;;
			-md) Change_Media_Directory ;;
			-tc) Transcode ;;
			-X) Uninstall ;;
			*) echo "Option $1 not recognized" 
				Help ;;
		esac
		shift
	done
else
	echo "No commands found."
	Help
	exit
fi

###############################################################################
# MAIN END                                                                    #
###############################################################################

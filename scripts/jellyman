#!/bin/bash
jellymanVersion="v1.7.7"
sourceFile="/opt/jellyfin/config/jellyman.conf"
source /usr/bin/base_functions.sh

###############################################################################
# FUNCTIONS                                                                   #
###############################################################################

Backup()
{
	Has_sudo
	source $sourceFile
	# Backup /opt/jellyfin to passed directory
	backupDirectory="$1"
	tarPath=
	_date=$(date +%m%d%Y%H%M)
	fileName=jellyfin-backup-$_date.tar
	if [[ ! -d /opt/jellyfin/backup ]]; then
		mkdir /opt/jellyfin/backup
	fi
	cp /usr/bin/jellyman /opt/jellyfin/backup/
	cp /usr/bin/base_functions.sh /opt/jellyfin/backup/
	cp /etc/jellyfin.conf /opt/jellyfin/backup/
	cp $jellyfinServiceLocation/jellyfin* /opt/jellyfin/backup/
	
	if [[ $(echo "${backupDirectory: -1}") == "/" ]]; then
		tarPath="$backupDirectory$fileName"
	else
		tarPath="$backupDirectory/$fileName"
	fi

	echo "> $tarPath"
	echo "> Running backup, this may take some time..."
	time tar cf "$tarPath" /opt/jellyfin
	USER1=$(stat -c '%U' "$backupDirectory")
	chown -f $USER1:$USER1 "$tarPath"
	chmod -f 770 "$tarPath"
	echo
	echo "+--------------------------------------------------------+"
	echo "|        To Import on your next setup, simply run:       |"
	echo "|  git clone https://github.com/Smiley-McSmiles/jellyman |"
	echo "|                       cd jellyman                      |"
	echo "|                   chmod ug+x setup.sh                  |"
	echo "|           sudo ./setup.sh and choose option 3          |"
	echo "+--------------------------------------------------------+"
	echo
	echo "> Your backup is:"
	tarSize=$(du -h "$tarPath")
	echo "> Size: $tarSize"
	return 0
	exit
}

Backup_auto()
{
	Has_sudo
	source $sourceFile
	if [[ ! -n $backupDir ]]; then
		echo "> ERROR: AUTO-BACKUPS HAVE NOT BEEN SETUP. PLEASE RUN 'jellyman -bu'"
		exit
	else
		jellyman -b "$backupDir"
		chown -Rf $defaultUser:$defaultUser "$backupDir/*.tar"

		tarList=$(ls -1 "$backupDir"/*.tar)
		newestTar=$(echo "$tarList" | tail -n 1)
		oldestTar=$(echo "$tarList" | head -n 1)
		tarCount=$(echo "$tarList" | wc -l)

		while [[ $tarCount -gt $maxBackupNumber ]]; do
			echo "> There are $tarCount backups."
			echo "> Since there are more than $maxBackupNumber backups..."
			echo "> Jellyman is removing $oldestTar"
			# echo "> NewBackup=$newestTar"
			rm -f "$oldestTar"
			tarList=$(ls -1 "$backupDir"/*.tar)
			newestTar=$(echo "$tarList" | tail -n 1)
			oldestTar=$(echo "$tarList" | head -n 1)
			tarCount=$(echo "$tarList" | wc -l)
		done
	fi
}

Backup_utility()
{
	Has_sudo
	source $sourceFile
	optionNumber=

	if [[ ! -d $backupDir ]]; then
		Prompt_user dir "> Please enter your desired directory for backup archives"
		backupDir="$promptDir"
		Prompt_user num "> Please enter your desired maximum number of backup archives" 1 20
		maxBackupNumber=$promptNum
		Set_var backupDir "backupDir" "$sourceFile" str
		Set_var maxBackupNumber "maxBackupNumber" "$sourceFile" str
		systemctl enable --now jellyfin-backup.timer
	fi

	echo "> 1. Enable automatic backups"
	echo "> 2. Disable automatic backups"
	echo "> 3. Change backup folder"
	echo "> 4. Change max backups"
	echo "> 5. Change frequency of backups"
	echo
	Prompt_user num "> Please select the number corresponding with the option you want to select." 1 5
	optionNumber=$promptNum
	echo
	
	if [[ $optionNumber == 1 ]]; then
		# enable auto-backups
		systemctl enable --now jellyfin-backup.timer

	elif [[ $optionNumber == 2 ]]; then
		# disable auto-backups
		systemctl disable --now jellyfin-backup.timer
	
	elif [[ $optionNumber == 3 ]]; then
		# change backup folder
		Prompt_user dir "> Please enter your desired directory for backup archives"
		backupDir="$promptDir"
		Set_var "backupDir" "$backupDir" "$sourceFile"

	elif [[ $optionNumber == 4 ]]; then
		# change max backups
		Prompt_user num "> Please enter your desired maximum number of backup archives" 1 50
		maxBackupNumber=$promptNum
		Set_var "maxBackupNumber" "$maxBackupNumber" "$sourceFile"
	
	else
		# change frequency of backups
		echo "> 1. Daily backups"
		echo "> 2. Weekly backups"
		echo "> 3. Monthly backups"
		echo
		Prompt_user num "> Please select the number corresponding with the option you want to select." 1 3
		_optionNumber=$promptNum
		echo
	
		jellyfinBackupTimer=/usr/lib/systemd/system/jellyfin-backup.timer
		if [[ $_optionNumber == 1 ]]; then
			sed -i "s|OnCalendar.*|OnCalendar=*-*-* 01:00:00|g" $jellyfinBackupTimer
			echo "> Backups will now be created every day at 1:00 AM"
		elif [[ $_optionNumber == 2 ]]; then
			sed -i "s|OnCalendar.*|OnCalendar=Sun *-*-* 01:00:00|g" $jellyfinBackupTimer
			echo "> Backups will now be created every Sunday at 1:00 AM"
		elif [[ $_optionNumber == 3 ]]; then
			sed -i "s|OnCalendar.*|OnCalendar=*-*-01 01:00:00|g" $jellyfinBackupTimer
			echo "> Backups will now be created on the 1st of every month at 1:00 AM"
		fi
		
		systemctl daemon-reload
		systemctl restart jellyfin-backup.timer
	fi
}

isCurrentVersion()
{
	source $sourceFile
	jellyfinVersionToDownload=$1
	if [[ $jellyfinVersionToDownload == $currentVersion ]]; then
		echo "> The installed version of Jellyfin matches the newest version available."
		echo "> Current Jellyfin version installed: $currentVersion"
		return 0
	else
		echo "> Newer Jellyfin version found..."
		return 1
	fi
}

isInstalledVersion()
{
	jellyfinVersionToDownload=$1
	
	if [ -d /opt/jellyfin/$jellyfinVersionToDownload ]; then
		echo "> The version to download matches an already installed version."
		echo "> Please use 'jellyman -vs' to switch Jellyfin versions."
		return 0
	else
		return 1
	fi
}

Check_disk_free()
{
	source $sourceFile
	if [ ! -n $defaultPath ]; then 
		echo "+-----------------------------------------------+"
		echo "|          No default directory found...        |"
		echo "|     Please enter the root directory for       |"
		echo "|              your Media Library               |"
		echo "|    DO NOT ENTER YOUR USER DIRECTORY AS IT     |"
		echo "|    WILL RESET PERMISSIONS OF THE ENTERED      |"
		echo "|       DIRECTORY TO YOUR JELLYFIN USER         |"
		echo "+-----------------------------------------------+"
		Prompt_user dir "> Enter a valid directory"
		defaultPath="$promptDir"
		defaultPath=($defaultPath)
		Set_var defaultPath $defaultPath "$sourceFile" array
		df -h ${defaultPath[*]}
	else 
		df -h ${defaultPath[*]}
	fi
}

Get_jellyman_version()
{
	echo "Jellyman $jellymanVersion"
}

Get_jellyfin_version()
{
	Has_sudo
	source $sourceFile
	versionFormatted=$(echo "$currentVersion" | sed -r "s|_| v|g" | sed -r "s|j|J|g")
	echo "$versionFormatted"
}

Download_version()
{
	Has_sudo
	source $sourceFile
	versionListVar=$(curl -sL https://repo.jellyfin.org/files/server/linux/stable/)
	versionList=$(echo "$versionListVar" | grep '>v' | cut -d '>' -f 2 | cut -d '/' -f 1)
	versionListNumbered=$(echo "$versionList" | cat -n)
	maxNumber=$(echo "$versionList" | wc -l)
	newVersionNumber=""
	versionToSwitchNumber=0
	warning=""

	clear
	echo "> **WARNING** If Jellyfin v10.9.0 or later has been installed, it is impossible to revert to older versions as they will no longer be supported by Jellyman"
	echo "> Current Jellyfin version installed"
	echo "> $currentVersion"
	echo
	echo "> Please select a stable version:"
	echo $warning
	echo "> $versionListNumbered"
	echo "> Please enter the number corresponding with"
	Prompt_user num "  the version you want to install" 1 $maxNumber
	versionToSwitchNumber=$promptNum
	newVersionNumber=$(echo "$versionList" | head -n $versionToSwitchNumber | tail -n 1)

	if isCurrentVersion "jellyfin_$newVersionNumber" || isInstalledVersion "jellyfin_$newVersionNumber"; then
		versionToSwitchnumber=0
		warning="ERROR: That Jellyfin version is already installed!"
	else
		newVersionNumberNoLetters=$(echo "$newVersionNumber" | sed -r "s|v||g")
		newVersionHyphen=$(echo "$newVersionNumberNoLetters"-)
		echo "> https://repo.jellyfin.org/files/server/linux/stable/$newVersionNumber/$architecture/jellyfin_$newVersionHyphen$architecture.tar.gz"
		jellyman -u "https://repo.jellyfin.org/files/server/linux/stable/$newVersionNumber/$architecture/jellyfin_$newVersionHyphen$architecture.tar.gz"
	fi
}

Version_switch()
{
	Has_sudo
	source $sourceFile
	versionToSwitchNumber=0
	installedVersions=$(ls /opt/jellyfin/ | grep "_")
	installedVersionsClean=$(echo "$installedVersions" | sed -r "s|j|J|g" | sed -r "s|_| v|g")
	maxNumber=$(echo "$installedVersions" | wc -l)
	warning=

	clear
	echo "> Current Jellyfin version installed"
	echo "> $currentVersion"
	echo
	echo "> Jellyfin versions already downloaded:"
	echo "> $installedVersionsClean" | cat -n
	echo "> $warning"
	echo "> Please enter the number corresponding with"
	Prompt_user num "  the version you want to install" 1 $maxNumber
	versionToSwitchNumber=$promptNum
	newVersion=$(echo "$installedVersions" | head -n $versionToSwitchNumber | tail -n 1)
	jellyman -S
	unlink /opt/jellyfin/jellyfin
	ln -s /opt/jellyfin/$newVersion /opt/jellyfin/jellyfin
	chown -Rfv $defaultUser:$defaultUser /opt/jellyfin/jellyfin
	Set_var currentVersion $newVersion "$sourceFile"
	jellyman -s
}

Remove_version()
{
	Has_sudo
	source $sourceFile
	versionToRemoveNumber=0
	versionToRemove=""
	installedVersions=$(ls /opt/jellyfin/ | grep "_")
	maxNumber=$(echo "$installedVersions" | wc -l)
	warning=

	clear
	echo "> Current Jellyfin version installed"
	echo "> $currentVersion"
	echo
	echo "> Jellyfin versions already downloaded:"
	echo "$installedVersions" | cat -n
	echo
	echo "> $warning"
	echo "> Please enter the number corresponding with"
	Prompt_user num "  the version you want to ERASE" 1 $maxNumber
	versionToSwitchNumber=$promptNum
	versionToRemove=$(echo "$installedVersions" | head -n $versionToRemoveNumber | tail -n 1)
	warning="ERROR: Please select one of the numbers provided!"
	if isCurrentVersion $versionToRemove; then
		warning="ERROR: $versionToRemove is the currently running version.
Please use 'jellyman -vs' and choose a different version,
before removing $versionToRemove"
		versionToRemoveNumber=0
	fi

	echo "> Removing /opt/jellyfin/$versionToRemove"
	Countdown 5
	rm -rfv /opt/jellyfin/$versionToRemove
}

Import()
{
	Has_sudo
	source $sourceFile
	importTar=$1
	
	Prompt_user file "> Please enter the path to the jellyfin-backup.tar archive."
	importTar=$promptFile
	echo
	echo "+--------------------------------------------------------------------+"
	echo "|                        ******CAUTION******                         |"
	echo "|      This import procedurewill erase /opt/jellyfin COMPLETELY      |"
	echo "+--------------------------------------------------------------------+"

	if Prompt_user yN "> Import $importTar?"; then
		echo "> IMPORTING $importTar"
		jellyman -S
		rm -rf /opt/jellyfin
		tar xvf $importTar -C /
		clear
		source $sourceFile
		mv -f /opt/jellyfin/backup/*.service $jellyfinServiceLocation/
		mv -f /opt/jellyfin/backup/jellyfin-backup.timer $jellyfinServiceLocation/
		systemctl daemon-reload
		mv -f /opt/jellyfin/backup/jellyfin.conf /etc/
		if id "$defaultUser" &>/dev/null; then 
			chown -Rfv $defaultUser:$defaultUser /opt/jellyfin
			chmod -Rfv 770 /opt/jellyfin
			jellyman -e -s
		else
			clear
			echo "+-----------------------------------------------------------------------------------------------+"
			echo "|                                     *******ERROR*******                                       |"
			echo "|          The imported default Jellyfin user($defaultUser) has not yet been created.           |"
			echo "|    This error is likely due to a read error of the /opt/jellyfin/config/jellyman.conf file.   |"
			echo "| The default user is usually created by Jellyman - The Jellyfin Manager, when running setup.sh.|"
			echo "|                   You may want to see who owns that configuration file with:                  |"
			echo "|                          'ls -l /opt/jellyfin/config/jellyman.conf'                           |"
			echo "+-----------------------------------------------------------------------------------------------+"
			sleep 5
			if Prompt_user yN "> Would you like to create the LINUX user $defaultUser?"; then
				echo "> Great!"
				useradd -rd /opt/jellyfin $defaultUser
				chown -Rfv $defaultUser:$defaultUser /opt/jellyfin
				chmod -Rfv 770 /opt/jellyfin
				jellyman -s -t
			else
				Prompt_user usr "> Please enter a new LINUX user."
				defaultUser=$promptUsr
				while id "$defaultUser" &>/dev/null; do
					echo "> Cannot create $defaultUser as $defaultUser already exists..."
					Prompt_user usr "> Please re-enter a new default Linux user for Jellyfin"
					defaultUser=$promptUsr
				 done
		 
				defaultUser=${defaultUser,,}
				echo "> Linux user = $defaultUser"
				useradd -rd /opt/jellyfin $defaultUser
				
				chown -Rfv $defaultUser:$defaultUser /opt/jellyfin
				chmod -Rfv 770 /opt/jellyfin
				jellyman -e -s -t
			fi
		fi
	else
		echo "> Returning..."
		return 0
		exit
	fi
}

Library_scan()
{
	Has_sudo
	source $sourceFile
	Check_api_key
	curl -d POST http://localhost:$httpPort/Library/Refresh?api_key=$apiKey
}

Import_api_key()
{
	Has_sudo
	echo "> Create a API key by signing into Jellyfin, going to Dashboard, then"
	echo "> clicking on API Keys under the Advanced section on the left."
	echo
	Prompt_user str "> Please paste your API Key"
	newAPIKey=$promptStr
	echo "> Logging new api key."
	Set_var apiKey $newAPIKey "$sourceFile"
}

Check_api_key()
{
	Has_sudo
	source $sourceFile
	if [[ ! -n $apiKey ]]; then
		echo "> ERROR: NO API KEY FOUND, RUN 'sudo jellyman -ik' TO IMPORT A NEW KEY!"
		return 1
		exit
	else
		return 0
	fi
}

Http_port_change()
{
	Has_sudo
	source $sourceFile
	echo
	echo "> Default http port is 8096"
	if Is_jellyfin_setup; then
		Prompt_user num "> Please enter the new http network port for Jellyfin" 1 100000
		port=$promptNum
		oldPort=$httpPort
		Set_var httpPort $port "$sourceFile"
		jellyman -S
		Set_xml_var InternalHttpPort "$port" "/opt/jellyfin/config/network.xml"
		Set_xml_var PublicHttpPort "$port" "/opt/jellyfin/config/network.xml"
		jellyman -s
		echo "> Unblocking port $port"
		echo "> Blocking previous port $oldPort"
		if [ -x "$(command -v ufw)" ]; then
			ufw allow $port
			ufw deny $oldPort
			ufw reload
		elif [ -x "$(command -v firewall-cmd)" ]; then 
			firewall-cmd --permanent --add-port=$port/tcp
			firewall-cmd --permanent --remove-port=$oldPort/tcp
			firewall-cmd --reload
		else
			echo "> ERROR: FAILED TO OPEN PORT $port!"
			echo "> REASON: NO 'ufw' OR 'firewall-cmd' COMMAND FOUND!"
		fi
	else
		exit
	fi
}

Https_port_change()
{
	Has_sudo
	source $sourceFile
	if Is_jellyfin_setup; then
		echo "> Default https port is 8920"
		Prompt_user num "> Please enter the new https network port for Jellyfin" 1 100000
		port=$promptNum
		oldPort=$httpsPort
		Set_var httpsPort $port "$sourceFile"
		jellyman -S
		Set_xml_var InternalHttpsPort "$port" "/opt/jellyfin/config/network.xml"
		Set_xml_var PublicHttpsPort "$port" "/opt/jellyfin/config/network.xml"
		jellyman -s
		echo "> Unblocking port $port"
		echo "> Blocking previous port $oldPort"
		if [ -x "$(command -v ufw)" ]; then
			ufw allow $port
			ufw deny $oldPort
			ufw reload
		elif [ -x "$(command -v firewall-cmd)" ]; then 
			firewall-cmd --permanent --add-port=$port/tcp
			firewall-cmd --permanent --remove-port=$oldPort/tcp
			firewall-cmd --reload
		else
			echo "> ERROR: FAILED TO OPEN PORT $port!"
			echo "> REASON: NO 'ufw' OR 'firewall-cmd' COMMAND FOUND!";
		fi
	else
		exit
	fi
}


Permissions()
{
	Has_sudo
	source $sourceFile
	checkForDefaultPath="yes"
	directoryToFix=

	if [[ -d "$1" ]]; then
		directoryToFix=$1
		echo "> Setting permissions for "$directoryToFix""
		time $(
			chown -R $defaultUser:$defaultUser "$directoryToFix"
			chmod -R 770 "$directoryToFix"
			chmod -R ug+X "$directoryToFix"
		)
		echo "> ...DONE"
	elif [[ ! -d "$1" ]] && [[ -n "$1" ]]; then
		echo "> $1 is not a directory. Please enter a absolute path to your media"
		echo "> EXITING..."
		exit
	else
		#Check if there is a recorded media library path for chown and chmod:
		if ! areDirectories "${defaultPath[*]}"; then
			echo "> No default media directory found..."
			echo "> Running sudo jellyman -md to change media directory in:"
			Countdown 5
			jellyman -md
		fi

		echo "> Setting permissions for ${defaultPath[*]}"
		time $(
			chown -R $defaultUser:$defaultUser ${defaultPath[*]}
			chmod -R 770 ${defaultPath[*]}
			chmod -R ug+X ${defaultPath[*]}
		)
		echo "> ...DONE"
	fi
}

Status()
{
	systemctl status jellyfin.service
	echo
	echo
	Check_disk_free
}

Update()
{
	Has_sudo
	source $sourceFile
	customVersionLink=
	customVersion=""
	fileType=""
	jellyfin_archive=""
	jellyfin=""
	new_jellyfin_version=""
	newJellyfinArchive=""
	
	if [[ $1 == *"://"* ]] ; then 
		echo "> Fetching custom Jellyfin version..."
		customVersionLink=$1
		customVersion=$(echo $customVersionLink | rev | cut -d/ -f1 | rev)
		jellyfin_archive=$customVersion
		newJellyfinArchive=$jellyfin_archive
		jellyfin=$(echo $jellyfin_archive | sed -r "s|-$architecture.tar.gz||g")
		fileType=$(echo $customVersion | cut -d '-' -f2)
		
		if isInstalledVersion $jellyfin; then
			exit
		fi
		
		if [[ $fileType != "$architecture.tar.gz" ]]; then
			echo "> Supplied URL does not point to a $architecture.tar.gz.. EXITING..."
			exit
		fi
		
		if [[ ! -d /opt/jellyfin/update ]]; then
			mkdir /opt/jellyfin/update
		fi
		wget -P /opt/jellyfin/update/ $customVersionLink
	
	else
		echo "> Getting current version from repository..."
		if [[ ! -d /opt/jellyfin/update ]]; then
			mkdir /opt/jellyfin/update
		fi
		stableReleases=$(curl -sL https://repo.jellyfin.org/?path=/server/linux/latest-stable/$architecture/)
		jellyfin_archive=$(echo "$stableReleases" | grep -Po jellyfin_[^_]+-$architecture.tar.gz | head -1)
		jellyfin=$(echo "$jellyfin_archive" | sed -r "s|-$architecture.tar.gz||g")
		newJellyfinArchive=$(echo "$jellyfin"-$architecture.tar.gz)
		
		# echo "jellyfin_archive = $jellyfin_archive"
		# echo "jellyfin = $jellyfin"
		# echo "currentVersion = $currentVersion"
		if ! isCurrentVersion $jellyfin && ! isInstalledVersion $jellyfin; then
			wget -O /opt/jellyfin/update/$newJellyfinArchive https://repo.jellyfin.org/files/server/linux/latest-stable/$architecture/$jellyfin_archive
		else
			exit
		fi
	fi
	
	new_jellyfin_version=$(echo $jellyfin | sed -r 's/jellyfin_//g')
	echo "> Unpacking $jellyfin_archive to /opt/jellyfin/$jellyfin"
	jellyman -S
	unlink /opt/jellyfin/jellyfin
	tar xvzf /opt/jellyfin/update/$newJellyfinArchive -C /opt/jellyfin/
	
	if [ -n "$(ls -A /opt/jellyfin/jellyfin/ 2>/dev/null)" ]; then
			mv -f /opt/jellyfin/jellyfin /opt/jellyfin/$jellyfin
	else
			echo "> Directory does not contain files..."
	fi

	ln -s /opt/jellyfin/$jellyfin /opt/jellyfin/jellyfin
	echo "> Removing $jellyfin_archive"
	rm -rfv /opt/jellyfin/update

	chown -R $defaultUser:$defaultUser /opt/jellyfin
	echo "> Jellyfin updated to version $new_jellyfin_version"
	Set_var currentVersion $jellyfin "$sourceFile"
	jellyman -s -t
}


# needs testing when new beta is available
Update_beta()
{
	Has_sudo
	source $sourceFile
	betasAvailable=$(curl -sL https://repo.jellyfin.org/?path=/server/linux/latest-unstable/$architecture/)
	jellyfinArchives=$(echo "$betasAvailable" | grep -o ">jellyfin_.*-$architecture.tar.gz<" | cut -d "'" -f 1 | sed -r "s|<||g" | sed -r "s|>||g" | head -1)
	jellyfinNumbered=$(echo "$jellyfinArchives" | sed -r "s|-$architecture.tar.gz||g" | cat -n)
	versionSelected=0
	maxNumber=$(echo "$jellyfinNumbered" | wc -l)
	newVersionName=
	newVersionNumber=
	newVersionArchive=
	warning=""
	
	if [[ ! $betasAvailable == .*"tar.gz".* ]]; then
		echo "> Sorry, no betas are available right now..."
		exit
	fi

	clear
	echo "> Available betas:"
	echo $warning
	echo "$jellyfinNumbered"
	echo

	Prompt_user num "> Select which version to install" 1 $maxNumber
	versionSelected=$promptNum
	newVersionName=$(echo "$jellyfinArchives" | head -n $versionSelected | tail -n 1 | sed -r "s|-$architecture.tar.gz||g")
	newVersionNumber=$(echo $newVersionName | sed -r 's/jellyfin_//g')
	if isCurrentVersion $newVersionName || isInstalledVersion $newVersionName; then
		warning="> ERROR: That Jellyfin version is already installed!"
		echo "> Press CTRL+C to exit..."
	else
		newVersionArchive=$(echo "$jellyfinArchives" | head -n $versionSelected | tail -n 1)
		echo "> Getting $newVersionArchive..."
		wget -O /opt/jellyfin/update/$newVersionName https://repo.jellyfin.org/files/server/linux/latest-unstable/$architecture/$newVersionArchive
		echo "> Unpacking $newVersionArchive to /opt/jellyfin/..."
		tar xvzf /opt/jellyfin/update/$newVersionArchive -C /opt/jellyfin/
		jellyman -S
		unlink /opt/jellyfin/jellyfin
		ln -s /opt/jellyfin/$newVersionName /opt/jellyfin/jellyfin
		echo "> Removing $newVersionArchive"
		rm -rfv /opt/jellyfin/update

		chown -R $defaultUser:$defaultUser /opt/jellyfin
		echo "> Jellyfin updated to version $newVersionNumber"
		Set_var currentVersion $newVersionName "$sourceFile"
		jellyman -s -t
	fi
}


Is_jellyfin_setup()
{
	if [ -f "/opt/jellyfin/config/network.xml" ]; then
		return 0
	else
		echo "+--------------------------------------------------------------+"
		echo "|                        ***WARNING***                         |"
		echo "|             JELLYFIN DID NOT GET SET UP PROPERLY!            |"
		echo "|        NO /opt/jellyfin/config/network.xml FILE FOUND        |"
		echo "|  This is likely due to not completing the first time setup.  |"
		echo "|     Navigate to http://localhost:8096/ to complete setup     |"
		echo "+--------------------------------------------------------------+"
		return 1
	fi
}

Recertify_https()
{
	Has_sudo
	source $sourceFile
	echo "+------------------------------------------------------+"
	echo "|  Creating OpenSSL self signed certificate for https. |"
	echo "|             Valid for the next 365 days.             |"
	echo "|       This only works if you have completed          |" 
	echo "|           first time setup in Jellyfin               |"
	echo "+------------------------------------------------------+"
	source $sourceFile
	if Is_jellyfin_setup; then
		rm -fv /opt/jellyfin/cert/*
		openssl req -x509 -newkey rsa:4096 -keyout /opt/jellyfin/cert/privkey.pem -out /opt/jellyfin/cert/cert.pem -days 365 -nodes -subj '/CN=jellyfin.lan'
		openssl pkcs12 -export -out /opt/jellyfin/cert/jellyfin.pfx -inkey /opt/jellyfin/cert/privkey.pem -in /opt/jellyfin/cert/cert.pem -passout pass:
		echo "> Enabling https..."
		jellyman -S
		Set_xml_var EnableHttps "true" "/opt/jellyfin/config/network.xml"
		Set_xml_var CertificatePath "/opt/jellyfin/cert/jellyfin.pfx" "/opt/jellyfin/config/network.xml"
		chown -Rf $defaultUser:$defaultUser /opt/jellyfin/cert
		chmod -Rf 770 /opt/jellyfin/cert
		jellyman -s
	else
		exit
	fi
}

Rename_tv()
{
	Has_sudo
	source $sourceFile
	nameOfTestFile=
	loop=true
	while $loop; do
		clear
		echo "|--------------------------------------------------------------|"
		echo "|                        ***WARNING***                         |"
		echo "|       TV SHOW FILE NAMES MUST CONTAIN 'SXXEXX' X=number      |"
		echo "|                                                              |"
		echo "|            Please enter the directory to correct             |"
		echo "|                        For example:                          |"
		echo "|  /jfin/TV/*/*/* <- For every Episode(May Crash Be Careful!)  |"
		echo "|                            OR:                               |"
		echo "|  /jfin/TV/Breaking*Bad/*/* <- For Every Episode in a show    |"
		echo "|                            OR:                               |"
		echo "|  /jfin/TV/Breaking*Bad/Season*2/* <- For Every Episode in    |"
		echo "|                    a season of a show                        |"
		echo "|                                                              |"
		echo "|      BE ADVISED, IF YOU'RE RE-NAMING MULTIPLE SHOWS,         |"
		echo "|             MAKE SURE ALL THE SHOW DIRECTORY                 |"
		echo "|      NAMES ARE IN THE SAME LOCATION IN THE DIRECTORY         |"
		echo "|--------------------------------------------------------------|"
		echo
		Prompt_user dir "> Please enter a directory"
		directoryToCorrect=$promptDir
		clear
		nameOfTestFile=$(ls -1 $directoryToCorrect | head -1)
		if [ -f "$nameOfTestFile" ]; then
			loop=false
		else
			echo "> Path does not exist, please try again."
		fi
	done
	
	testDirCount=$(echo $nameOfTestFile | grep -o "/" | wc -w)

	if [[ $directoryToCorrect != *"/" ]]; then
		testDirCount=$(($testDirCount + 1))
	fi

	iteration=2
	number=1

	while [ $number -lt $testDirCount ]; do
		testName=$(echo $nameOfTestFile | cut -d "/" -f $iteration)
		echo "> $number : $testName"
		iteration=$(($iteration + 1))
		
		number=$(($number + 1))	
	done
	
	echo "> Please enter the number that corresponds with the show's name above"
	read directoryNumber
	directoryNumber=$(($directoryNumber + 1))
	nameOfShow=$(dirname "$directoryToCorrect" | cut -d "/" -f $directoryNumber)
	echo "> You chose $nameOfShow"

	for item in $directoryToCorrect
	do
		echo $item
			if [[ "$item" == *[sS][0-9][0-9][eE][0-9][0-9]* ]]; then
				extensionOfFile="${item##*.}"
				nameOfDirectory=$(dirname "$item")
				nameOfShow=$(dirname "$item" | cut -d "/" -f $directoryNumber)
				episodeNumber=$(echo "$item" | grep -oE '[sS][0-9][0-9][eE][0-9][0-9]')
				mv "$item" "$nameOfDirectory/$nameOfShow $episodeNumber.$extensionOfFile"
				newItemName="$nameOfDirectory/$nameOfShow $episodeNumber.$extensionOfFile"
				echo "> item:"
				echo "> $item"
				#echo "Directory:"
				#echo "$nameOfDirectory"
				#echo "Name Of Show:"
				#echo $nameOfShow
				#echo "Episode:"
				#echo "$episodeNumber"
				#echo "extension of file:"
				#echo "$extensionOfFile"
				echo "> New Name:"
				echo "> $newItemName"
				chown -fv $defaultUser:$defaultUser "$newItemName"
				chmod -fv 770 "$newItemName"
				echo
			fi
	done
}

Uninstall()
{
	Has_sudo
	source $sourceFile
	echo "|-------------------------------------------------------------------|"
	echo "|                        ******WARNING******                        |"
	echo "|                        ******CAUTION******                        |"
	echo "|                     Are you completely sure?                      |"
	echo "|          This will delete all files relating to Jellyfin          |"
	echo "|   and Jellyman, exceptthe Media Library and jellyfin-backup.tar   |"
	echo "|-------------------------------------------------------------------|"
	echo
	if Prompt_user yN "> CONTINUE?"; then
		echo "> Goodbye..."
		echo "> Removing Jellyfin and Jellyman in:"
		Countdown 5
			echo "> Blocking port 8096 and 8920..."
		if [ -x "$(command -v ufw)" ]; then
			ufw deny $httpPort/tcp
			ufw deny $httpsPort/tcp
			ufw reload
		elif [ -x "$(command -v firewall-cmd)" ]; then
			firewall-cmd --permanent --remove-port=$httpPort/tcp
			firewall-cmd --permanent --remove-port=$httpsPort/tcp
			firewall-cmd --reload
		else
			echo "|-------------------------------------------------------------------|"
			echo "|                        ******WARNING******                        |"
			echo "|                        ******CAUTION******                        |"
			echo "|                  FAILED TO CLOSE PORT 8096/8920!                  |"
			echo "|          ERROR NO 'ufw' OR 'firewall-cmd' COMMAND FOUND!          |"
			echo "|-------------------------------------------------------------------|"
		fi
		jellyman -d -S
		systemctl disable --now jellyfin-backup.timer
		rm -fv /etc/jellyfin.conf $jellyfinServiceLocation/jellyfin*
		rm -rfv /opt/jellyfin
		userdel -f $defaultUser
		rm -fv /usr/bin/base_functions.sh /usr/bin/jellyman
	else
		echo "> Phew! That was a close one!"
	fi
}

Kill_job()
{
	# Run a job '_ID="jellyman-tc && COMMAND &'
	# To kill a job `Kill_job "jellyman-tc"
	_jobName=$1
	_jobID=$(jobs | grep "$_jobName" | cut -d "[" -f 2 | cut -d "]" -f 1)
	kill %$_jobID
}

Dev_func()
{
	Has_sudo
	source $sourceFile
	_func=$1
	$1
}

Progress_bar()
{
	progressBarConf="/tmp/jellyman_transcode.conf"
	if [ -f $progressBarConf ]; then
		source $progressBarConf
		currentState=$startState
		totalState=$maxState
		currentVideoSizeMB=$(du -m "$currentVideo" | cut -d "	" -f 1)
		previousVideoSizeMB=$(du -m "$previousVideo" | cut -d "	" -f 1)
		sizeSavingsPercent=$(bc -l <<< "$currentVideoSizeMB/$previousVideoSizeMB*100")
		sizeSavingsPercent=$(bc -l <<< "100-$sizeSavingsPercent" | cut -c 1-4)'%'
		let _progress=(${currentState}*100/${totalState}*100)/100
		let _done=(${_progress}*4)/10
		let _left=40-$_done
		_fill=$(printf "%${_done}s")
		_empty=$(printf "%${_left}s")

		printf "\rTranscoded : [$currentState/$totalState] [${_fill// /#}${_empty// /-}] ${_progress}%%"
		printf "\nTranscoding File : $previousVideo \n"
		echo "> Original Size    : $previousVideoSizeMB MB"
		echo "> New Size         : $currentVideoSizeMB MB"
		echo "> Percentave Saved : $sizeSavingsPercent"

		if [ $currentState -eq $totalState ]; then
			printf '\nFinished!\n'
		fi
	else
		echo "> loading..."
	fi
}

View_Transcode_Progress()
{
	while true; do
		clear
		Progress_bar
		echo
		echo "> CTRL+C to exit progress bar"
		echo "> 'jellyman -tcp' to bring back Transcode Progress"
		sleep 3
	done
}

Qualify_Transcode()
{
	videoToEdit="$1"
	desiredGBperHour=$2
	qualifiedVideos="/tmp/jellyman_qualified_videos.txt"

	videoSize=$(du -h "$videoToEdit" | cut -d "/" -f 1)
	videoDuration=$(ffprobe -i "$videoToEdit" -show_entries format=duration -v quiet -of csv="p=0" | cut -d "." -f 1)
	if isVideo "$videoToEdit"; then
		_videoSizeGB=null
		_videoTimeHours=$(bc -l <<< "$videoDuration/3600")
		if [[ $videoSize == *"M"* ]]; then
			_videoSizeMB=$(echo $videoSize | sed -r "s|M||g" | cut -d "	" -f 1)
			_videoSizeGB=$(bc -l <<< "$_videoSizeMB/1024")
		else
			_videoSizeGB=$(echo $videoSize | sed -r "s|G||g")
		fi
		_videoRatio=$(bc -l <<< "$_videoSizeGB/$_videoTimeHours")
		if [ 1 -eq "$(echo "$_videoRatio > $desiredGBperHour" | bc)" ]; then
			echo "> Transcoding $videoToEdit ..."
			_newName=$(echo $videoToEdit | rev | cut -d "." -f 2 | rev)
			echo "> Video time in Hours: $_videoTimeHours"
			echo "> Video size GB: $_videoSizeGB"
			echo "> Current GB/Hour: $_videoRatio"
			echo "$videoToEdit" >> $qualifiedVideos
		else
			echo "> $videoToEdit is less than $desiredGBperHour GB/Hour, skipping..."
		fi
	else
		_file=$(echo $videoToEdit | rev | cut -d "/" -f 1 | rev)
		echo "> $_file is not a video, skipping..."
	fi
}

Transcode_stop()
{
	qualifiedVideos="/tmp/jellyman_qualified_videos.txt"
	progressBarConf="/tmp/jellyman_transcode.conf"
	screen -XS jellyman_transcode quit
	rm $qualifiedVideos
	rm $progressBarConf
}

Transcode_file()
{
	deleteOrNot=$1
	preset=$2
	crf=$3
	qualifiedVideos="/tmp/jellyman_qualified_videos.txt"
	progressBarConf="/tmp/jellyman_transcode.conf"
	totalVideos=$(cat "$qualifiedVideos" | wc -l)
	iteration=0
	currentVideo=

	while [ ! $iteration -eq $totalVideos ]; do
		iteration=$(($iteration + 1))
		currentVideo=$(cat "$qualifiedVideos" | head -n $iteration | tail -n 1)
		_newName=$(echo $currentVideo | rev | cut -d "." -f 2 | rev)
		_progressIteration=$(($iteration - 1))
#		_progress=$(Progress_bar $_progressIteration $totalVideos)
#		echo "$_progress" > $progressBarFile

		echo '#!/bin/bash' > "$progressBarConf"
		Set_var startState "$_progressIteration" "$progressBarConf" str
		Set_var maxState "$totalVideos" "$progressBarConf" str
		Set_var currentVideo "$_newName.downsampled.mp4" "$progressBarConf" str
		Set_var previousVideo "$currentVideo" "$progressBarConf" str

		echo "> Transcoding $currentVideo"
		nice ffmpeg -y -i "$currentVideo" -c:v libx265 -c:a copy -movflags +faststart -preset $preset -crf $crf "$_newName.downsampled.mp4"
		_newVideoSize=$(du -h "$_newName.downsampled.mp4" | cut -d "/" -f 1)
		echo "> Downsampled size: $_newVideoSize"
		if $deleteOrNot; then
			echo "> DELETING $currentVideo IN: "
			Countdown 10
			rm -v "$currentVideo"
			mv -v "$_newName.downsampled.mp4" "$_newName.mp4"
		fi
	done

	sed -i "s|startState=.*|startState=$totalVideos|g" "$progressBarConf"
	sleep 10
	rm $qualifiedVideos
	exit
}

Transcode()
{
	echo "|--------------------------------------------------------------|"
	echo "|                        ***WARNING***                         |"
	echo "|          Please enter the directory to transcode             |"
	echo "|                        For example:                          |"
	echo "|  /jfin/TV/*/*/* <- For every Episode(May Crash Be Careful!)  |"
	echo "|                            OR:                               |"
	echo "|  /jfin/TV/Breaking*Bad/*/* <- For Every Episode in a show    |"
	echo "|                            OR:                               |"
	echo "|  /jfin/TV/Breaking*Bad/Season*2/* <- For Every Episode in    |"
	echo "|                    a season of a show                        |"
	echo "|                                                              |"
	echo "|       BE ADVISED, IF YOU'RE TRANSCODING MULTIPLE FILES,      |"
	echo "|       THIS IS GOING TO TAKE A WHILE, IT IS RECOMMENDED       |"
	echo "|        TO RUN THIS COMMAND IN 'screen' THEN PRESSING         |"
	echo "|                       CTRL + A THEN D                        |"
	echo "|--------------------------------------------------------------|"
	Prompt_user dir "> Please enter the path to the file(s)"
	_directoryToCorrect=$promptDir
	echo
	echo "> Please enter the desired GB per hour of video"
	Prompt_user str "> EXAMPLE: 1 OR 2.5"
	desiredGBperHour=$promptStr
	
	preset=0
	clear
	echo
	echo "> 1: ultrafast"
	echo "> 2: superfast"
	echo "> 3: veryfast"
	echo "> 4: faster"
	echo "> 5: fast"
	echo '> 6: medium (RECOMMENDED)'
	echo "> 7: slow"
	echo "> 8: slower"
	echo "> 9: veryslow"
	echo
	Prompt_user num "> Please choose a transcode preset" 1 9
	preset=$promptNum
	echo
	case "$preset" in
		1)	preset="ultrafast" ;;
		2)	preset="superfast" ;;
		3)	preset="veryfast" ;;
		4)	preset="faster" ;;
		5)	preset="fast" ;;
		6)	preset="medium" ;;
		7)	preset="slow" ;;
		8)	preset="slower" ;;
		9)	preset="veryslow" ;;
	esac
	
	crf=0
	clear
	echo '> Please enter a Constant Rate Factor (CRF) [20-30]'
	echo "> 22-26 is recommended"
	Prompt_user num "> 20 is better quality and 30 is lower quality" 20 30
	crf=$promptNum
	echo
	if Prompt_user yN "> Would you like to delete the original file(s) after transcode?"; then
		deleteOrNot=true
	else
		deleteOrNot=false
	fi
	
	for item in $_directoryToCorrect
	do
		Qualify_Transcode "$item" $desiredGBperHour
	done

	screen -dmS jellyman_transcode jellyman --dev_func "Transcode_file $deleteOrNot $preset $crf"
	sleep 1
	View_Transcode_Progress
}

Update-jellyman()
{
	Has_sudo
	jellymanManFile=$(curl -sL https://raw.githubusercontent.com/Smiley-McSmiles/jellyman/main/jellyman.1)
	currentJellymanVersion=$(echo $jellymanManFile | grep " - v" | cut -d "v" -f2 | cut -d " " -f1)
	if [[ "v$currentJellymanVersion" == $jellymanVersion ]]; then
		echo "> Jellyman is up to date. No new versions available."
		exit
	else
		echo "> Updating Jellyman - The Jellyfin Manager from $jellymanVersion to v$currentJellymanVersion"
		git clone https://github.com/Smiley-McSmiles/jellyman
		cd jellyman
		chmod ug+x setup.sh
		sudo ./setup.sh -U
	fi
}

Change_Media_Directory()
{
	Has_sudo
	mediaPath=""
	warning=""
	continue=true

	while $continue; do
		clear
		echo "|---------------------------------------------------------|"
		echo "| Please enter all media directories separated by a space |"
		echo "|                       example:                          |"
		echo "|          /media/hdd1/Movies /media/hdd2/TV              |"
		echo "|---------------------------------------------------------|"
		echo
		echo $warning
		Prompt_user str " "
		mediaPath=$promptStr
		if areDirectories "$mediaPath"; then
			continue=false
		else
			warning="ERROR: Make sure each input is a directory!"
			exit
		fi
	done

	Set_var defaultPath "$mediaPath" "$sourceFile" array
}

Help()
{
	# Display Help
	echo "Jellyman - The Jellyfin Manager $jellymanVersion"
	echo "-Created by Smiley McSmiles"
	echo
	echo "Syntax: jellyman -[COMMAND] [PARAMETER]"
	echo "COMMANDS:"
	echo "-b, --backup                 [DIRECTORY] Input directory to output backup archive."
	echo "-ba, --backup-auto           Perform an automatic backup."
	echo "-bu, --backup-utility        Start the automatic backup utility."
	echo "-d, --disable                Disable Jellyfin on System Start."
	echo "-e, --enable                 Enable Jellyfin on System Start."
	echo "-h, --help                   Print this Help."
	echo "-i, --import                 [FILE.tar] Input file to Import jellyfin-backup.tar."
	echo "-p, --permissions            [DIRECTORY - optional] Reset the permissions of Jellyfin's Media Library or supplied directory."
	echo "-r, --restart                Restart Jellyfin."
	echo "-s, --start                  Start Jellyfin."
	echo "-S, --stop                   Stop Jellyfin."
	echo "-t, --status                 Status of Jellyfin."
	echo "-u, --update-jellyfin        [URL - optional] Downloads and updates the current stable or supplied Jellyfin version."
	echo "-U, --update-jellyman        Update Jellyman - The Jellyfin Manager."
	echo "-ub, --update-beta           Update Jellyfin to the most recent Beta."
	echo "-ls, --library-scan          Tell Jellyfin to scan your media library."
	echo "-v, --version                Get the current installed version of Jellyfin."
	echo "-vd, --version-download      Download an available Jellyfin version from the stable repository."
	echo "-vs, --version-switch        Switch Jellyfin version for another previously installed version."
	echo "-vr, --version-remove        Remove a Jellyfin version."
	echo "-rc, --recertify             Removes old https certifications and creates new ones for the next 365 days."
	echo "-rn, --rename                Batch renaming script for TV shows."
	echo "-cp, --change-http           Change Jellyfins http network port - Default = 8096"
	echo "-cps, --change-https         Change Jellyfins https network port - Default = 8920."
	echo "-ik, --import-key            Import an API key"
	echo "-md, --media-directory       Change the Media Directory for Jellyman."
	echo "-tc, --transcode             Transcode a file/directory with a GB per hour filter (1.5GB is recommended)"
	echo "-tcp, --transcode-progress   View progress of the Transcode"
	echo "-tcs, --transcode-stop       Stop the current transcode process."
	echo "-X, --uninstall              Uninstall Jellyfin and Jellyman Completely."
	echo
	echo "To browse Jellyfin archives please use this link."
	echo "https://repo.jellyfin.org/files/server/linux/stable/"
	echo
	echo "EXAMPLE:"
	echo "- To stop jellyfin, disable on startup, and then get status of the jellyfin service:"
	echo '├── "sudo jellyman --stop --disable --status"'
	echo '└── "sudo jellyman -S -d -t"'

}

###############################################################################
# FUNCTIONS END                                                               #
###############################################################################


###############################################################################
# MAIN                                                                        #
###############################################################################
if [ -n "$1" ]; then
	total=1
	while [ -n "$1" ]; do
		case "$1" in
			-b | --backup) Backup "$2"
				 shift ;;
			-ba | --backup-auto) Backup_auto ;;
			-bu | --backup-utility) Backup_utility ;;
			-d | --disable) systemctl disable jellyfin.service ;;
			-e | --enable) systemctl enable jellyfin.service ;;
			-h | --help) Help ;;
			-i | --import) Import "$2"
				 shift ;;
			-p | --permissions) if [[ "$2" == "-"* ]]; then
					 Permissions 
				 else
					 Permissions $2
					 shift 
				 fi ;;
			-r | --restart) systemctl restart jellyfin.service ;;
			-s | --start) systemctl start jellyfin.service ;;
			-S | --stop) systemctl stop jellyfin.service ;;
			-t | --status) Status ;;
			-u | --update-jellyfin) if [[ "$2" == "-"* ]]; then
					 Update
				 else
					 Update $2
					 shift
				 fi ;;
			-U | --update-jellyman) Update-jellyman
				 exit ;;
			-ub | --update-beta) Update_beta ;;
			-v | --version) Get_jellyfin_version
					Get_jellyman_version ;;
			-vd | --version-download) Download_version ;;
			-vs | --version-switch) Version_switch ;;
			-rv | --remove-version) Remove_version ;;
			-rc | --recertify) Recertify_https ;;
			-rn | --rename) Rename_tv ;;
			-ls | --library-scan) Library_scan ;;
			-cp | --change-http) Http_port_change ;;
			-cps | --change-https) Https_port_change ;;
			-ik | --import-key) Import_api_key ;;
			-md | --media-directory) Change_Media_Directory ;;
			-tc | --transcode) Transcode ;;
			-tcp | --transcode-progress) View_Transcode_Progress ;;
#			-tcf) Transcode_file $2 $3 $4
#						shift
#						shift
#						shift ;;
			-tcs | --transcode-stop) Transcode_stop ;;
			-X | --uninstall) Uninstall ;;
			--dev_func) Dev_func "$2"
									shift ;;
			*) echo "> ERROR: Option $1 not recognized" 
				Help ;;
		esac
		shift
	done
else
	echo "> No commands found."
	Help
	exit
fi

###############################################################################
# MAIN END                                                                    #
###############################################################################
